import logging; logger = logging.getLogger("morse." + __name__)
from morse.modifiers.abstract_modifier import AbstractModifier
from math import radians, pi

class OdometryFrameModifier(AbstractModifier):
    """ 
    This modifier converts the coordinates generated by the MORSE simulator to
    change to the North, East, Down (NED) coordinate system, instead of the East,
    North, Up (ENU) system normally used by Blender.

    The NED modifier provides as modifiers:
    
    * :py:class:`morse.modifiers.OdometryFrameModifier.integratedToNED`

    """
    
    _name = "NED"
    
    def modify(self):
        pass

    """
    Constrain the angle to +/- pi
    """
    def constrain_angle(self, x):
        return (x + pi) % (2 * pi) - pi


class IntegratedToNED(OdometryFrameModifier):
    """ Works on properties used by the integrated odometry sensor. """
    """ Convert the coordinates from ENU to NED. """
    """ Convert the angles from ENU to NED. """
    """ Convert the rates from ENU to NED. """
    def modify(self):
        try:
            tmp = self.data['x']
            self.data['x'] =  self.data['y']
            self.data['y'] =  tmp
            self.data['z'] = -self.data['z']

            self.data['roll']  =  self.data['roll']
            self.data['pitch'] = -self.data['pitch']
            self.data['yaw']   = -self.data['yaw'] + radians(90)
            self.data['yaw'] = self.constrain_angle(self.data['yaw'])

            print(self.data['yaw'])

            self.data['vx'] =  self.data['vx']
            self.data['vy'] = -self.data['vy']
            self.data['vz'] = -self.data['vz']

            self.data['wx'] =  self.data['wx']
            self.data['wy'] = -self.data['wy']
            self.data['wz'] = -self.data['wz']

        except KeyError as detail:
            self.key_error(detail)        
